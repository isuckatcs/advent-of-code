from python import Python


struct CubeCount:
    var red: Int
    var green: Int
    var blue: Int

    fn __init__(inout self):
        self.red = 0
        self.green = 0
        self.blue = 0

    fn setDefaults(inout self):
        self.red = 12
        self.green = 13
        self.blue = 14

    fn isValid(self) -> Bool:
        return self.red >= 0 and self.green >= 0 and self.blue >= 0


struct Split:
    var p1: String
    var p2: String

    fn __init__(inout self, p1: String, p2: String):
        self.p1 = p1
        self.p2 = p2


fn split(string: String, delim: String) -> Split:
    for i in range(len(string)):
        if string[i] == delim:
            return Split(string[0:i], string[i + 1 :])

    return Split(string, String(""))


fn max(a: Int, b: Int) -> Int:
    if a >= b:
        return a
    return b


fn part1(line: String) raises -> Int:
    # [Game X| <rounds>]
    let t = split(line, ":")

    # [ <round>| <round>; <round>; ...]
    var rounds = split(t.p2[:-1], ";")
    while len(rounds.p1) != 0:
        let round = rounds.p1
        rounds = split(rounds.p2[:], ";")

        var cc = CubeCount()
        cc.setDefaults()

        # [ <draw>| <draw>, <draw>, ...]
        var draws = split(round, ",")
        while len(draws.p1) != 0:
            let draw = draws.p1[1:]
            draws = split(draws.p2[:], ",")

            # [X|<color>]
            let t = split(draw, " ")
            let n = atol(t.p1)

            if t.p2 == "red":
                cc.red -= n
            elif t.p2 == "green":
                cc.green -= n
            elif t.p2 == "blue":
                cc.blue -= n

        if not cc.isValid():
            return 0

    # [Game|X]
    return atol(split(t.p1, " ").p2)


fn part2(line: String) raises -> Int:
    # [Game X| <rounds>]
    let t = split(line, ":")
    var cc = CubeCount()

    # [ <round>| <round>; <round>; ...]
    var rounds = split(t.p2[:-1], ";")
    while len(rounds.p1) != 0:
        let round = rounds.p1
        rounds = split(rounds.p2[:], ";")

        # [ <draw>| <draw>, <draw>, ...]
        var draws = split(round, ",")
        while len(draws.p1) != 0:
            let draw = draws.p1[1:]
            draws = split(draws.p2[:], ",")

            # [X|<color>]
            let t = split(draw, " ")
            let n = atol(t.p1)

            if t.p2 == "red":
                cc.red = max(cc.red, n)
            elif t.p2 == "green":
                cc.green = max(cc.green, n)
            elif t.p2 == "blue":
                cc.blue = max(cc.blue, n)

    return cc.red * cc.green * cc.blue


def main():
    var py = Python()
    let sys = py.import_module("sys")

    var part1Sum = 0
    var part2Sum = 0
    for line in sys.stdin:
        part1Sum += part1(py.__str__(line))
        part2Sum += part2(py.__str__(line))

    print(part1Sum)
    print(part2Sum)
