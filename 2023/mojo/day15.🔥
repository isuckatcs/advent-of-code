from collections.vector import DynamicVector


# Not generic, to prevent a lifetime analysis crash.
@value
struct Pair(CollectionElement):
    var a: String
    var b: Int


fn filter(v: DynamicVector[Pair], elem: String) -> DynamicVector[Pair]:
    var tmp = DynamicVector[Pair]()

    for i in range(0, len(v)):
        if v[i].a != elem:
            tmp.push_back(v[i])

    return tmp


fn part1(line: String) raises -> Int:
    var res = 0

    let steps = line.split(",")
    for i in range(0, len(steps)):
        var hash = 0
        for j in range(0, len(steps[i])):
            hash += int(steps[i]._buffer[j])
            hash *= 17
            hash %= 256
        res += hash

    return res


fn part2(line: String) raises -> Int:
    var boxes = DynamicVector[DynamicVector[Pair]]()
    boxes.resize(256, DynamicVector[Pair]())

    let steps = line.split(",")
    for i in range(0, len(steps)):
        let cur = steps[i]
        let rm = cur[len(cur) - 1] == "-"

        let delim: String
        if rm:
            delim = "-"
        else:
            delim = "="

        let label = cur.split(delim)[0]

        var hash = 0
        for j in range(0, len(label)):
            hash += int(label._buffer[j])
            hash *= 17
            hash %= 256

        if rm:
            boxes[hash] = filter(boxes[hash], label)
            continue

        let val = atol(cur[len(cur) - 1])
        for j in range(0, len(boxes[hash])):
            if boxes[hash][j].a == label:
                boxes[hash][j].b = val
                break
        else:
            boxes[hash].push_back(Pair(label, val))

    var total = 0
    for i in range(0, 256):
        if len(boxes[i]) == 0:
            continue

        for j in range(0, len(boxes[i])):
            total += (i + 1) * (j + 1) * boxes[i][j].b

    return total


fn main() raises:
    with open("/dev/stdin", "r") as stdin:
        let input = stdin.read()

        print(part1(input))
        print(part2(input))
