from collections.vector import DynamicVector
from python import Python


@value
@register_passable
struct Number(CollectionElement):
    var line: Int
    var begin: Int
    var end: Int
    var val: Int


@value
@register_passable
struct Symbol(CollectionElement):
    var row: Int
    var col: Int


fn part1(inout lines: PythonObject) raises -> Int:
    var py = Python()
    var symbols = DynamicVector[Symbol]()
    var numbers = DynamicVector[Number]()

    var li = 0
    for line in lines:
        var ci = 0
        let lineLen = len(py.__str__(line))
        while ci < lineLen:
            if isdigit(ord(py.__str__(line[ci]))):
                let b = ci
                while ci < lineLen and isdigit(ord(py.__str__(line[ci]))):
                    ci += 1

                let str: String = py.__str__(line)
                let val = atol(str[b:ci])
                numbers.push_back(Number(li, b, ci - 1, val))
                continue

            let tok = line[ci]
            if tok != "." and tok != "\n":
                symbols.push_back(Symbol(li, ci))

            ci += 1
        li += 1

    var out = 0

    var ni = 0
    while ni < len(numbers):
        var si = 0
        while si < len(symbols):
            if (
                symbols[si].row >= numbers[ni].line - 1
                and symbols[si].row <= numbers[ni].line + 1
                and symbols[si].col >= numbers[ni].begin - 1
                and symbols[si].col <= numbers[ni].end + 1
            ):
                out += numbers[ni].val

            si += 1

        ni += 1

    return out


fn part2(inout lines: PythonObject) raises -> Int:
    var py = Python()
    var symbols = DynamicVector[Symbol]()
    var numbers = DynamicVector[Number]()

    var li = 0
    for line in lines:
        var ci = 0
        let lineLen = len(py.__str__(line))
        while ci < lineLen:
            if isdigit(ord(py.__str__(line[ci]))):
                let b = ci
                while ci < lineLen and isdigit(ord(py.__str__(line[ci]))):
                    ci += 1

                let str: String = py.__str__(line)
                let val = atol(str[b:ci])
                numbers.push_back(Number(li, b, ci - 1, val))
                continue

            let tok = line[ci]
            if tok == "*" and tok != "\n":
                symbols.push_back(Symbol(li, ci))

            ci += 1
        li += 1

    var out = 0

    var si = 0
    while si < len(symbols):
        var adjNums = DynamicVector[Int]()
        var ni = 0
        while ni < len(numbers):
            if (
                symbols[si].row >= numbers[ni].line - 1
                and symbols[si].row <= numbers[ni].line + 1
                and symbols[si].col >= numbers[ni].begin - 1
                and symbols[si].col <= numbers[ni].end + 1
            ):
                adjNums.push_back(numbers[ni].val)

            ni += 1

        if len(adjNums) == 2:
            out += adjNums[0] * adjNums[1]

        si += 1

    return out


fn main() raises:
    let py = Python()
    let sys = py.import_module("sys")

    var lines = PythonObject([])

    for line in sys.stdin:
        _ = lines.append(line)

    print(part1(lines))
    print(part2(lines))
